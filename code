#slither game
#written by Dr.Mo, 1/20/2021 Flavio Rios 
import pygame #imports 
import math #needed for square root function 
import random 

pygame.init() #initializes Pygame
pygame.display.set_caption("Slither") #sets the window title 
screen = pygame.display.set_mode ((400,400)) #Creates game screen 
clock = pygame.time.Clock() # start game clock 

#game variables 
doExit = False 

# player variables 
xPos = 200
yPos = 200
Vx = 1
Vy = 1
oldX = 200
oldY = 200
xPos2 = 200
yPos2 = 200
Vx2 = 1
Vy2 = 1
oldX2 = 200
oldY2 = 200
counter = 0

#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
class pellet: 
    def __init__(self,xpos, ypos, red, green, blue, radius):
        self.xpos = xpos
        self.ypos = ypos
        self.red = red
        self.green = green 
        self.blue = blue 
        self.radius = radius 
    def draw(self):
        pygame.draw.circle(screen, (self.red, self.green, self.blue),(self.xpos, self.ypos),self.radius)
    def collide (self, x, y):
        if math.sqrt((x-self.xpos)*(x-self.xpos) + (y-self.ypos)*(y-self.ypos)) < self.radius + 6: 

            self.xpos = random.randrange(0,400)
            self.ypos = random.randrange(0,400)
            self.red = random.randrange (0,255)
            self.blue = random.randrange (0,255)
            self.green = random.randrange (0,255)
            self.radius = random.randrange (0,30)
            return True

class TailSeg:
    def __init__(self, xpos, ypos):
        self.xpos = xpos
        self.ypos = ypos
    def update(self, xpos, ypos):
        self.xpos = xpos
        self.ypos = ypos
    def draw(self):
        pygame.draw.circle(screen, (random.randrange (0,255),random.randrange (0,255),random.randrange (0,255)), (self.xpos, self.ypos), 12)


# endl class pellet++++++++++++++++++++++++++++++++++++++++++++++
pelletBag = list ()#creates a list data structure 
tail = list()

#Push 10 pellets into the list 
for i in range(10):
    pelletBag.append(pellet(random.randrange(0,400), random.randrange(0,400),random.randrange(0,250),random.randrange(0,250),random.randrange(0,250),random.randrange(5,30))) 

    #p1 = pellet(200,50,100,20,220,10)
    #p2 = pellet(120,210,100,20,220,40)
    #p3 = pellet(180,100,168,50,160,20)
    #p4 = pellet(50,100,50,84,168,50)


# game loop #######################################
while not doExit:

    # event/input section --------------------------------------
    clock.tick(60)
    for event in pygame.event.get(): # grabs any events (mouse movement, keyboard, etc.)
        if event.type == pygame.QUIT: # lets you quit the game from the game screen 
            doExit = True 

    if event.type == pygame.MOUSEMOTION:
      mousePos = event.pos

      if mousePos[0] >xPos:
        Vx = 1 
      else: 
        Vx = -1
      if mousePos[1]>yPos:
        Vy = 1
      else:
        Vy = -1


    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
      xPos2-=1
    if keys[pygame.K_RIGHT]:
      xPos+=1
    if keys[pygame.K_UP]:
      yPos2-=1
    if keys[pygame.K_DOWN]:
      yPos+=1



    counter += 1 #update counter
    if counter == 10: #create a delay so the segments follow behind
        counter = 0 #reset counter every 20 ticks
        oldX = xPos #hold onto old player position from 20 ticks ago
        oldY = yPos
            
        if(len(tail)>2): #don't push numbers if there are no nodes yet
            for i in range(len(tail)): #loop for each slot in list
                    #start in LAST position, push the *second to last* into  it, repeat till at beginning
                    tail[len(tail)-i-1].xpos = tail[len(tail)-i-2].xpos
                    tail[len(tail)-i-1].ypos = tail[len(tail)-i-2].ypos
                    
        if(len(tail)>0): #If you have at least one segment, push old head position into that 
            tail[0].update(oldX, oldY) #push head poition in to first position  of list

    # physics section ------------------------------------------

    #update circle position
    xPos += Vx
    yPos += Vy
  
    #check for collison with pellets 
    for i in range(10):
        if pelletBag[i].collide(xPos, yPos) == True:
            tail.append(TailSeg(oldX, oldY))
            #print("appending tail seg")
               
    if xPos > 400:
        doExit = True
    if xPos < 0:
        doExit = True
    if yPos > 400:
        doExit = True
    if yPos < 0:
        doExit = True


    # render section--------------------------------------------

    screen.fill((255,255,255)) # wipe screen (withough this, things smear)

    for i in range(10):
        pelletBag[i].draw()

    for i in range (len(tail)):
        tail[i].draw()
  
    pygame.draw.circle(screen,(random.randrange (0,255),random.randrange (0,255),random.randrange (0,255)), (xPos,yPos ), 12)
    pygame.draw.circle(screen, (random.randrange (0,255),random.randrange (0,255),random.randrange (0,255)), (xPos2,yPos2 ), 12)
 
    #print("tail length:", len(tail))
  
    pygame.display.flip()
# ends game loop #####################################
print ("GAME OVER")
pygame.quit()
